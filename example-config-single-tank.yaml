substitutions:
  name: water-tank-example
  friendly_name: Water_tank_example

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: '1.0'

esp8266:
  board: d1

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Example Fallback Hotspot"
    password: "DXxlcD7pQkt7"

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

dashboard_import:
  package_import_url: github://esphome/example-configs/esphome-web/esp8266.yaml@main
  import_full_config: true

# To have a "next url" for improv serial
web_server:
      port: 80
      local: true
sensor:
  - platform: ultrasonic
    accuracy_decimals: 4
    trigger_pin: D2
    echo_pin: D1
    name: "Example Water Tank Sensor"
    id: example_water_tank_sensor

  - platform: template
    name: "Full Water Height Example Tank"
    id: full_water_height_example_tank
    unit_of_measurement: "cm"
    update_interval: 60s
    lambda: |-
      return 147.00;  // Set the value accordingly
    
  - platform: template
    name: "Sensor Height From Water Level Example Tank"
    id: sensor_height_from_water_level_example_tank
    unit_of_measurement: "cm"
    update_interval: 60s
    lambda: |-
      return 20.77;  // Set the value accordingly
    
  - platform: template
    name: "Water Tank Max Capacity Example Tank"
    id: water_tank_max_capacity_example_tank
    unit_of_measurement: "l"
    update_interval: 60s
    lambda: |-
      return 2500;  // Set the value accordingly
    
  - platform: template
    name: "Water Tank Level Percentage Example Tank"
    id: water_tank_level_percentage_example_tank
    unit_of_measurement: "%"
    update_interval: 60s
    lambda: |-
      float full_water_height = id(full_water_height_example_tank).state;
      float sensor_height = id(sensor_height_from_water_level_example_tank).state;
      float tank_sensor = id(example_water_tank_sensor).state;
      float tank_level = full_water_height - tank_sensor + sensor_height;
      return (((full_water_height + sensor_height) - (tank_sensor * 100)) / (full_water_height) * 100 );
    
  - platform: template
    name: "Water Tank Current Capacity Example Tank"
    id: water_tank_current_capacity_example_tank
    unit_of_measurement: "l"
    update_interval: 60s
    lambda: |-
      float max_capacity = id(water_tank_max_capacity_example_tank).state;
      float percentage = id(water_tank_level_percentage_example_tank).state;
      return (max_capacity * percentage)/100;